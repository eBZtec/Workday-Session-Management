"""Remove table Deactivated and turns into a column into StandardWorkHours datetime

Revision ID: 7d2e572a522f
Revises: 9fa2f417966f
Create Date: 2024-10-10 17:28:16.021133

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7d2e572a522f'
down_revision: Union[str, None] = '9fa2f417966f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('deactivated')
    op.alter_column('standard_workhours', 'start_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('standard_workhours', 'end_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('standard_workhours', 'create_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('standard_workhours', 'update_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('standard_workhours', 'update_timestamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('standard_workhours', 'create_timestamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('standard_workhours', 'end_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('standard_workhours', 'start_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.create_table('deactivated',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('std_wrk_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('uid', postgresql.CITEXT(), autoincrement=False, nullable=False),
    sa.Column('cn', sa.VARCHAR(length=240), autoincrement=False, nullable=True),
    sa.Column('create_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('update_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('deactivation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['std_wrk_id'], ['standard_workhours.id'], name='deactivated_std_wrk_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='deactivated_pkey')
    )
    # ### end Alembic commands ###
